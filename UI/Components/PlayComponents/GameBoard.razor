@using UI.Models
@inject GamesService GamesService

<div class="h-screen flex flex-col gap-6 items-center justify-center">
  @if (Board is not null)
  {
    <div class="grid gap-4 @CalculateGrid()">
      @foreach (var card in Board.Cards)
      {
        <div @onclick="() => RevealCard(card)" class="card__container @(card.ShouldBeRemoved ? "hide" : "")">
          <div class="card relative h-full w-full @(card.IsRevealed ? "rotated" : "")">
            <div class="card-front bg-orange-500">
              <p>?</p>
            </div>
            <div class="card-back bg-yellow-400">
              <p>@card.Id</p>
            </div>
          </div>
        </div>
      }
    </div>
  }
  <button @onclick="EndGame" class="btn primary-btn">End Game</button>
</div>


@code {
  private Board? Board { get; set; }
  private Card? FirstRevealedCard { get; set; }
  private Card? SecondRevealedCard { get; set; }
  private bool IsChecking { get; set; }

  private string CalculateGrid()
  {
    return Board!.Size switch
    {
      2 => "grid-cols-2",
      4 => "grid-cols-4",
      8 => "grid-cols-4",
      16 => "grid-cols-6",
      _ => ""
    };
  }

  protected override void OnInitialized()
  {
    Board = new Board(GamesService.Game.Difficulty);
  }

  private void EndGame()
  {
    GamesService.ResetGame();
  }

  private async Task RevealCard(Card card)
  {
    if (IsChecking || card.IsRevealed || card.ShouldBeRemoved)
      return;

    card.IsRevealed = true;
    if (FirstRevealedCard is null)
    {
      FirstRevealedCard = card;
      return;
    }

    SecondRevealedCard = card;
    IsChecking = true;
    // Wait 500ms before checking cards pair
    await Task.Delay(500);
    CheckPair(FirstRevealedCard, SecondRevealedCard);
    IsChecking = false;
  }

  private void CheckPair(Card card1, Card card2)
  {
    if (card1.Id != card2.Id)
    {
      card1.IsRevealed = false;
      card2.IsRevealed = false;
    }
    else
    {
      // Increase score
      // Remove cards from the board
      card1.ShouldBeRemoved = true;
      card2.ShouldBeRemoved = true;
    }

    FirstRevealedCard = null;
    SecondRevealedCard = null;
  }

}